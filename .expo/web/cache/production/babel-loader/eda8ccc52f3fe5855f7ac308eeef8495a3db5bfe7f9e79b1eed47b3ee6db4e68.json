{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import*as Crypto from'expo-crypto';import invariant from'invariant';var CHARSET='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';function getRandomValues(input){var output=input;if(input.byteLength!==input.length)input=new Uint8Array(input.buffer);var bytes=Crypto.getRandomBytes(input.length);for(var i=0;i<bytes.length;i++)input[i]=bytes[i];return output;}function convertBufferToString(buffer){var state=[];for(var i=0;i<buffer.byteLength;i+=1){var index=buffer[i]%CHARSET.length;state.push(CHARSET[index]);}return state.join('');}function convertToUrlSafeString(b64){return b64.replace(/\\+/g,'-').replace(/\\//g,'_').replace(/=/g,'');}export function generateRandom(size){var buffer=new Uint8Array(size);getRandomValues(buffer);return convertBufferToString(buffer);}export function deriveChallengeAsync(_x){return _deriveChallengeAsync.apply(this,arguments);}function _deriveChallengeAsync(){_deriveChallengeAsync=_asyncToGenerator(function*(code){invariant(code.length>42&&code.length<129,'Invalid code length for PKCE.');var buffer=yield Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256,code,{encoding:Crypto.CryptoEncoding.BASE64});return convertToUrlSafeString(buffer);});return _deriveChallengeAsync.apply(this,arguments);}export function buildCodeAsync(){return _buildCodeAsync.apply(this,arguments);}function _buildCodeAsync(){_buildCodeAsync=_asyncToGenerator(function*(){var size=arguments.length>0&&arguments[0]!==undefined?arguments[0]:128;var codeVerifier=generateRandom(size);var codeChallenge=yield deriveChallengeAsync(codeVerifier);return{codeVerifier:codeVerifier,codeChallenge:codeChallenge};});return _buildCodeAsync.apply(this,arguments);}export function generateHexStringAsync(_x2){return _generateHexStringAsync.apply(this,arguments);}function _generateHexStringAsync(){_generateHexStringAsync=_asyncToGenerator(function*(size){var value=generateRandom(size);var buffer=yield Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256,value,{encoding:Crypto.CryptoEncoding.HEX});return convertToUrlSafeString(buffer);});return _generateHexStringAsync.apply(this,arguments);}","map":{"version":3,"names":["Crypto","invariant","CHARSET","getRandomValues","input","output","byteLength","length","Uint8Array","buffer","bytes","getRandomBytes","i","convertBufferToString","state","index","push","join","convertToUrlSafeString","b64","replace","generateRandom","size","deriveChallengeAsync","_x","_deriveChallengeAsync","apply","arguments","_asyncToGenerator","code","digestStringAsync","CryptoDigestAlgorithm","SHA256","encoding","CryptoEncoding","BASE64","buildCodeAsync","_buildCodeAsync","undefined","codeVerifier","codeChallenge","generateHexStringAsync","_x2","_generateHexStringAsync","value","HEX"],"sources":["/Users/nika/Documents/GitHub/AI_quiz_generatorold/node_modules/expo-auth-session/src/PKCE.ts"],"sourcesContent":["import * as Crypto from 'expo-crypto';\nimport invariant from 'invariant';\n\nconst CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\nfunction getRandomValues(input: Uint8Array): Uint8Array {\n  const output = input;\n  // Get access to the underlying raw bytes\n  if (input.byteLength !== input.length) input = new Uint8Array(input.buffer);\n\n  const bytes = Crypto.getRandomBytes(input.length);\n\n  for (let i = 0; i < bytes.length; i++) input[i] = bytes[i];\n\n  return output;\n}\n\nfunction convertBufferToString(buffer: Uint8Array): string {\n  const state: string[] = [];\n  for (let i = 0; i < buffer.byteLength; i += 1) {\n    const index = buffer[i] % CHARSET.length;\n    state.push(CHARSET[index]);\n  }\n  return state.join('');\n}\n\nfunction convertToUrlSafeString(b64: string): string {\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nexport function generateRandom(size: number): string {\n  const buffer = new Uint8Array(size);\n  getRandomValues(buffer);\n  return convertBufferToString(buffer);\n}\n\n/**\n * Proof key for Code Exchange by OAuth Public Clients (RFC 7636), Section 4.1\n * [Section 4.1](https://tools.ietf.org/html/rfc7636#section-4.1)\n */\nexport async function deriveChallengeAsync(code: string): Promise<string> {\n  // 43 is the minimum, and 128 is the maximum.\n  invariant(code.length > 42 && code.length < 129, 'Invalid code length for PKCE.');\n\n  const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, code, {\n    encoding: Crypto.CryptoEncoding.BASE64,\n  });\n  return convertToUrlSafeString(buffer);\n}\n\nexport async function buildCodeAsync(\n  size: number = 128\n): Promise<{ codeChallenge: string; codeVerifier: string }> {\n  // This method needs to be resolved like all other native methods.\n  const codeVerifier = generateRandom(size);\n  const codeChallenge = await deriveChallengeAsync(codeVerifier);\n\n  return { codeVerifier, codeChallenge };\n}\n\n/**\n * Digest a random string with hex encoding, useful for creating `nonce`s.\n */\nexport async function generateHexStringAsync(size: number): Promise<string> {\n  const value = generateRandom(size);\n  const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, value, {\n    encoding: Crypto.CryptoEncoding.HEX,\n  });\n  return convertToUrlSafeString(buffer);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}