{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{CodedError}from'expo-modules-core';import{CryptoEncoding}from\"./Crypto.types\";var getCrypto=function getCrypto(){var _window$crypto;return(_window$crypto=window.crypto)!=null?_window$crypto:window.msCrypto;};export default{get name(){return'ExpoCrypto';},digestStringAsync:function(){var _digestStringAsync=_asyncToGenerator(function*(algorithm,data,options){if(!crypto.subtle){throw new CodedError('ERR_CRYPTO_UNAVAILABLE','Access to the WebCrypto API is restricted to secure origins (https).');}var encoder=new TextEncoder();var buffer=encoder.encode(data);var hashedData=yield crypto.subtle.digest(algorithm,buffer);if(options.encoding===CryptoEncoding.HEX){return hexString(hashedData);}else if(options.encoding===CryptoEncoding.BASE64){return btoa(String.fromCharCode.apply(String,_toConsumableArray(new Uint8Array(hashedData))));}throw new CodedError('ERR_CRYPTO_DIGEST','Invalid encoding type provided.');});function digestStringAsync(_x,_x2,_x3){return _digestStringAsync.apply(this,arguments);}return digestStringAsync;}(),getRandomBytes:function getRandomBytes(length){var array=new Uint8Array(length);return getCrypto().getRandomValues(array);},getRandomBytesAsync:function(){var _getRandomBytesAsync=_asyncToGenerator(function*(length){var array=new Uint8Array(length);return getCrypto().getRandomValues(array);});function getRandomBytesAsync(_x4){return _getRandomBytesAsync.apply(this,arguments);}return getRandomBytesAsync;}(),getRandomValues:function getRandomValues(typedArray){return getCrypto().getRandomValues(typedArray);},randomUUID:function randomUUID(){return getCrypto().randomUUID();},digestAsync:function digestAsync(algorithm,data){return getCrypto().subtle.digest(algorithm,data);}};function hexString(buffer){var byteArray=new Uint8Array(buffer);var hexCodes=_toConsumableArray(byteArray).map(function(value){var hexCode=value.toString(16);var paddedHexCode=hexCode.padStart(2,'0');return paddedHexCode;});return hexCodes.join('');}","map":{"version":3,"names":["CodedError","CryptoEncoding","getCrypto","_window$crypto","window","crypto","msCrypto","name","digestStringAsync","_digestStringAsync","_asyncToGenerator","algorithm","data","options","subtle","encoder","TextEncoder","buffer","encode","hashedData","digest","encoding","HEX","hexString","BASE64","btoa","String","fromCharCode","apply","_toConsumableArray","Uint8Array","_x","_x2","_x3","arguments","getRandomBytes","length","array","getRandomValues","getRandomBytesAsync","_getRandomBytesAsync","_x4","typedArray","randomUUID","digestAsync","byteArray","hexCodes","map","value","hexCode","toString","paddedHexCode","padStart","join"],"sources":["/Users/nika/Documents/GitHub/AI_quiz_generatorold/node_modules/expo-crypto/src/ExpoCrypto.web.ts"],"sourcesContent":["import { CodedError, TypedArray } from 'expo-modules-core';\n\nimport { CryptoDigestAlgorithm, CryptoEncoding, CryptoDigestOptions } from './Crypto.types';\n\nconst getCrypto = (): Crypto => window.crypto ?? (window as any).msCrypto;\n\nexport default {\n  get name(): string {\n    return 'ExpoCrypto';\n  },\n  async digestStringAsync(\n    algorithm: CryptoDigestAlgorithm,\n    data: string,\n    options: CryptoDigestOptions\n  ): Promise<string> {\n    if (!crypto.subtle) {\n      throw new CodedError(\n        'ERR_CRYPTO_UNAVAILABLE',\n        'Access to the WebCrypto API is restricted to secure origins (https).'\n      );\n    }\n    const encoder = new TextEncoder();\n    const buffer = encoder.encode(data);\n    const hashedData = await crypto.subtle.digest(algorithm, buffer);\n    if (options.encoding === CryptoEncoding.HEX) {\n      return hexString(hashedData);\n    } else if (options.encoding === CryptoEncoding.BASE64) {\n      return btoa(String.fromCharCode(...new Uint8Array(hashedData)));\n    }\n    throw new CodedError('ERR_CRYPTO_DIGEST', 'Invalid encoding type provided.');\n  },\n  getRandomBytes(length: number): Uint8Array {\n    const array = new Uint8Array(length);\n    return getCrypto().getRandomValues(array);\n  },\n  async getRandomBytesAsync(length: number): Promise<Uint8Array> {\n    const array = new Uint8Array(length);\n    return getCrypto().getRandomValues(array);\n  },\n  getRandomValues(typedArray: TypedArray) {\n    return getCrypto().getRandomValues(typedArray);\n  },\n  randomUUID() {\n    return getCrypto().randomUUID();\n  },\n  digestAsync(algorithm: AlgorithmIdentifier, data: ArrayBuffer): Promise<ArrayBuffer> {\n    return getCrypto().subtle.digest(algorithm, data);\n  },\n};\n\nfunction hexString(buffer: ArrayBuffer): string {\n  const byteArray = new Uint8Array(buffer);\n\n  const hexCodes = [...byteArray].map((value) => {\n    const hexCode = value.toString(16);\n    const paddedHexCode = hexCode.padStart(2, '0');\n    return paddedHexCode;\n  });\n\n  return hexCodes.join('');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}