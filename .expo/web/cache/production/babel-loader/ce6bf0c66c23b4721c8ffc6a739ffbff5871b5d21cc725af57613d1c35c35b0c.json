{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import Constants,{ExecutionEnvironment}from'expo-constants';import*as Linking from'expo-linking';import{Platform}from'expo-modules-core';import{dismissAuthSession}from'expo-web-browser';import{AuthRequest}from\"./AuthRequest\";import{CodeChallengeMethod,Prompt,ResponseType}from\"./AuthRequest.types\";import{fetchDiscoveryAsync,resolveDiscoveryAsync}from\"./Discovery\";import{generateHexStringAsync}from\"./PKCE\";import sessionUrlProvider from\"./SessionUrlProvider\";export function dismiss(){dismissAuthSession();}export var getDefaultReturnUrl=sessionUrlProvider.getDefaultReturnUrl;export function getRedirectUrl(path){return sessionUrlProvider.getRedirectUrl({urlPath:path});}export function makeRedirectUri(){var _ref=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},native=_ref.native,scheme=_ref.scheme,isTripleSlashed=_ref.isTripleSlashed,queryParams=_ref.queryParams,path=_ref.path,preferLocalhost=_ref.preferLocalhost;if(Platform.OS!=='web'&&native&&[ExecutionEnvironment.Standalone,ExecutionEnvironment.Bare].includes(Constants.executionEnvironment)){return native;}var url=Linking.createURL(path||'',{isTripleSlashed:isTripleSlashed,scheme:scheme,queryParams:queryParams});if(preferLocalhost){var ipAddress=url.match(/\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/);if(ipAddress!=null&&ipAddress.length){var _url$split=url.split(ipAddress[0]),_url$split2=_slicedToArray(_url$split,2),protocol=_url$split2[0],_path=_url$split2[1];return`${protocol}localhost${_path}`;}}return url;}export function loadAsync(_x,_x2){return _loadAsync.apply(this,arguments);}function _loadAsync(){_loadAsync=_asyncToGenerator(function*(config,issuerOrDiscovery){var request=new AuthRequest(config);var discovery=yield resolveDiscoveryAsync(issuerOrDiscovery);yield request.makeAuthUrlAsync(discovery);return request;});return _loadAsync.apply(this,arguments);}export{useAutoDiscovery,useAuthRequest}from\"./AuthRequestHooks\";export{AuthError,TokenError}from\"./Errors\";export{AuthRequest,CodeChallengeMethod,Prompt,ResponseType,resolveDiscoveryAsync,fetchDiscoveryAsync,generateHexStringAsync};export{TokenResponse,AccessTokenRequest,RefreshTokenRequest,RevokeTokenRequest,revokeAsync,refreshAsync,exchangeCodeAsync,fetchUserInfoAsync}from\"./TokenRequest\";export*from\"./TokenRequest.types\";","map":{"version":3,"names":["Constants","ExecutionEnvironment","Linking","Platform","dismissAuthSession","AuthRequest","CodeChallengeMethod","Prompt","ResponseType","fetchDiscoveryAsync","resolveDiscoveryAsync","generateHexStringAsync","sessionUrlProvider","dismiss","getDefaultReturnUrl","getRedirectUrl","path","urlPath","makeRedirectUri","_ref","arguments","length","undefined","native","scheme","isTripleSlashed","queryParams","preferLocalhost","OS","Standalone","Bare","includes","executionEnvironment","url","createURL","ipAddress","match","_url$split","split","_url$split2","_slicedToArray","protocol","loadAsync","_x","_x2","_loadAsync","apply","_asyncToGenerator","config","issuerOrDiscovery","request","discovery","makeAuthUrlAsync","useAutoDiscovery","useAuthRequest","AuthError","TokenError","TokenResponse","AccessTokenRequest","RefreshTokenRequest","RevokeTokenRequest","revokeAsync","refreshAsync","exchangeCodeAsync","fetchUserInfoAsync"],"sources":["/Users/nika/Documents/GitHub/AI_quiz_generatorold/node_modules/expo-auth-session/src/AuthSession.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nimport { dismissAuthSession } from 'expo-web-browser';\n\nimport { AuthRequest } from './AuthRequest';\nimport {\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  Prompt,\n  ResponseType,\n} from './AuthRequest.types';\nimport {\n  AuthSessionOptions,\n  AuthSessionRedirectUriOptions,\n  AuthSessionResult,\n} from './AuthSession.types';\nimport {\n  DiscoveryDocument,\n  fetchDiscoveryAsync,\n  Issuer,\n  IssuerOrDiscovery,\n  ProviderMetadata,\n  resolveDiscoveryAsync,\n} from './Discovery';\nimport { generateHexStringAsync } from './PKCE';\nimport sessionUrlProvider from './SessionUrlProvider';\n\n// @needsAudit\n/**\n * Cancels an active `AuthSession` if there is one.\n */\nexport function dismiss() {\n  dismissAuthSession();\n}\n\nexport const getDefaultReturnUrl = sessionUrlProvider.getDefaultReturnUrl;\n\n// @needsAudit @docsMissing\n/**\n * Get the URL that your authentication provider needs to redirect to. For example: `https://auth.expo.io/@your-username/your-app-slug`. You can pass an additional path component to be appended to the default redirect URL.\n * > **Note** This method will throw an exception if you're using the bare workflow on native.\n *\n * @param path\n * @return\n *\n * @example\n * ```ts\n * const url = AuthSession.getRedirectUrl('redirect');\n *\n * // Managed: https://auth.expo.io/@your-username/your-app-slug/redirect\n * // Web: https://localhost:19006/redirect\n * ```\n *\n * @deprecated Use `makeRedirectUri()` instead.\n */\nexport function getRedirectUrl(path?: string): string {\n  return sessionUrlProvider.getRedirectUrl({ urlPath: path });\n}\n\n// @needsAudit\n/**\n * Create a redirect url for the current platform and environment. You need to manually define the redirect that will be used in\n * a bare workflow React Native app, or an Expo standalone app, this is because it cannot be inferred automatically.\n * - **Web:** Generates a path based on the current `window.location`. For production web apps, you should hard code the URL as well.\n * - **Managed workflow:** Uses the `scheme` property of your app config.\n * - **Bare workflow:** Will fallback to using the `native` option for bare workflow React Native apps.\n *\n * @param options Additional options for configuring the path.\n * @return The `redirectUri` to use in an authentication request.\n *\n * @example\n * ```ts\n * const redirectUri = makeRedirectUri({\n *   scheme: 'my-scheme',\n *   path: 'redirect'\n * });\n * // Development Build: my-scheme://redirect\n * // Expo Go: exp://127.0.0.1:8081/--/redirect\n * // Web dev: https://localhost:19006/redirect\n * // Web prod: https://yourwebsite.com/redirect\n *\n * const redirectUri2 = makeRedirectUri({\n *   scheme: 'scheme2',\n *   preferLocalhost: true,\n *   isTripleSlashed: true,\n * });\n * // Development Build: scheme2:///\n * // Expo Go: exp://localhost:8081\n * // Web dev: https://localhost:19006\n * // Web prod: https://yourwebsite.com\n * ```\n */\nexport function makeRedirectUri({\n  native,\n  scheme,\n  isTripleSlashed,\n  queryParams,\n  path,\n  preferLocalhost,\n}: AuthSessionRedirectUriOptions = {}): string {\n  if (\n    Platform.OS !== 'web' &&\n    native &&\n    [ExecutionEnvironment.Standalone, ExecutionEnvironment.Bare].includes(\n      Constants.executionEnvironment\n    )\n  ) {\n    // Should use the user-defined native scheme in standalone builds\n    return native;\n  }\n  const url = Linking.createURL(path || '', {\n    isTripleSlashed,\n    scheme,\n    queryParams,\n  });\n\n  if (preferLocalhost) {\n    const ipAddress = url.match(\n      /\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/\n    );\n    // Only replace if an IP address exists\n    if (ipAddress?.length) {\n      const [protocol, path] = url.split(ipAddress[0]);\n      return `${protocol}localhost${path}`;\n    }\n  }\n\n  return url;\n}\n\n// @needsAudit\n/**\n * Build an `AuthRequest` and load it before returning.\n *\n * @param config A valid [`AuthRequestConfig`](#authrequestconfig) that specifies what provider to use.\n * @param issuerOrDiscovery A loaded [`DiscoveryDocument`](#discoverydocument) or issuer URL.\n * (Only `authorizationEndpoint` is required for requesting an authorization code).\n * @return Returns an instance of `AuthRequest` that can be used to prompt the user for authorization.\n */\nexport async function loadAsync(\n  config: AuthRequestConfig,\n  issuerOrDiscovery: IssuerOrDiscovery\n): Promise<AuthRequest> {\n  const request = new AuthRequest(config);\n  const discovery = await resolveDiscoveryAsync(issuerOrDiscovery);\n  await request.makeAuthUrlAsync(discovery);\n  return request;\n}\n\nexport { useAutoDiscovery, useAuthRequest } from './AuthRequestHooks';\nexport { AuthError, TokenError } from './Errors';\n\nexport {\n  AuthSessionOptions,\n  AuthSessionRedirectUriOptions,\n  AuthSessionResult,\n  AuthRequest,\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  DiscoveryDocument,\n  Issuer,\n  IssuerOrDiscovery,\n  Prompt,\n  ProviderMetadata,\n  ResponseType,\n  resolveDiscoveryAsync,\n  fetchDiscoveryAsync,\n  generateHexStringAsync,\n};\n\nexport {\n  // Token classes\n  TokenResponse,\n  AccessTokenRequest,\n  RefreshTokenRequest,\n  RevokeTokenRequest,\n  // Token methods\n  revokeAsync,\n  refreshAsync,\n  exchangeCodeAsync,\n  fetchUserInfoAsync,\n} from './TokenRequest';\n\n// Token types\nexport * from './TokenRequest.types';\n\n// Provider specific types\nexport { GoogleAuthRequestConfig } from './providers/Google';\nexport { FacebookAuthRequestConfig } from './providers/Facebook';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}