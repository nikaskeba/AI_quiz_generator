{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import Constants,{ExecutionEnvironment}from'expo-constants';import*as Linking from'expo-linking';import{Platform}from'expo-modules-core';import qs from'qs';export var SessionUrlProvider=function(){function SessionUrlProvider(){_classCallCheck(this,SessionUrlProvider);}_createClass(SessionUrlProvider,[{key:\"getDefaultReturnUrl\",value:function getDefaultReturnUrl(urlPath,options){var _options$scheme;var queryParams=SessionUrlProvider.getHostAddressQueryParams();var path=SessionUrlProvider.SESSION_PATH;if(urlPath){path=[path,SessionUrlProvider.removeLeadingSlash(urlPath)].filter(Boolean).join('/');}return Linking.createURL(path,{scheme:(_options$scheme=options==null?void 0:options.scheme)!=null?_options$scheme:Linking.resolveScheme({isSilent:true}),queryParams:queryParams,isTripleSlashed:options==null?void 0:options.isTripleSlashed});}},{key:\"getStartUrl\",value:function getStartUrl(authUrl,returnUrl,projectNameForProxy){if(Platform.OS==='web'&&!Platform.isDOMAvailable){return'';}var queryString=qs.stringify({authUrl:authUrl,returnUrl:returnUrl});return`${this.getRedirectUrl({projectNameForProxy:projectNameForProxy})}/start?${queryString}`;}},{key:\"getRedirectUrl\",value:function getRedirectUrl(options){var _Constants$expoConfig,_Constants$__unsafeNo;if(Platform.OS==='web'){if(Platform.isDOMAvailable){return[window.location.origin,options.urlPath].filter(Boolean).join('/');}else{return'';}}var legacyExpoProjectFullName=options.projectNameForProxy||((_Constants$expoConfig=Constants.expoConfig)==null?void 0:_Constants$expoConfig.originalFullName)||((_Constants$__unsafeNo=Constants.__unsafeNoWarnManifest)==null?void 0:_Constants$__unsafeNo.originalFullName);if(!legacyExpoProjectFullName){var nextSteps='';if(__DEV__){if(Constants.executionEnvironment===ExecutionEnvironment.Bare){nextSteps=' Please ensure you have the latest version of expo-constants installed and rebuild your native app. You can verify that originalFullName is defined by running `expo config --type public` and inspecting the output.';}else if(Constants.executionEnvironment===ExecutionEnvironment.StoreClient){nextSteps=' Please report this as a bug with the contents of `expo config --type public`.';}}if(Constants.manifest2){nextSteps=' Prefer AuthRequest in combination with an Expo Development Client build of your application.'+' To continue using the AuthSession proxy, specify the project full name (@owner/slug) using the projectNameForProxy option.';}throw new Error('Cannot use the AuthSession proxy because the project full name is not defined.'+nextSteps);}var redirectUrl=`${SessionUrlProvider.BASE_URL}/${legacyExpoProjectFullName}`;if(__DEV__){SessionUrlProvider.warnIfAnonymous(legacyExpoProjectFullName,redirectUrl);}return redirectUrl;}}],[{key:\"getHostAddressQueryParams\",value:function getHostAddressQueryParams(){var _Constants$expoConfig2,_hostUri;var hostUri=(_Constants$expoConfig2=Constants.expoConfig)==null?void 0:_Constants$expoConfig2.hostUri;if(!hostUri&&(ExecutionEnvironment.StoreClient===Constants.executionEnvironment||Linking.resolveScheme({}))){if(!Constants.linkingUri){hostUri='';}else{hostUri=SessionUrlProvider.removeScheme(Constants.linkingUri).replace(/\\/--(\\/.*)?$/,'');}}if(!hostUri){return undefined;}var uriParts=(_hostUri=hostUri)==null?void 0:_hostUri.split('?');try{return qs.parse(uriParts==null?void 0:uriParts[1]);}catch(_unused){}return undefined;}},{key:\"warnIfAnonymous\",value:function warnIfAnonymous(id,url){if(id.startsWith('@anonymous/')){console.warn(`You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires adding redirect URLs to an allow list, we recommend that you do not add this URL -- instead, you should sign in to Expo to acquire a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`);}}},{key:\"removeScheme\",value:function removeScheme(url){return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//,'');}},{key:\"removeLeadingSlash\",value:function removeLeadingSlash(url){return url.replace(/^\\//,'');}}]);return SessionUrlProvider;}();SessionUrlProvider.BASE_URL=`https://auth.expo.io`;SessionUrlProvider.SESSION_PATH='expo-auth-session';export default new SessionUrlProvider();","map":{"version":3,"names":["Constants","ExecutionEnvironment","Linking","Platform","qs","SessionUrlProvider","_classCallCheck","_createClass","key","value","getDefaultReturnUrl","urlPath","options","_options$scheme","queryParams","getHostAddressQueryParams","path","SESSION_PATH","removeLeadingSlash","filter","Boolean","join","createURL","scheme","resolveScheme","isSilent","isTripleSlashed","getStartUrl","authUrl","returnUrl","projectNameForProxy","OS","isDOMAvailable","queryString","stringify","getRedirectUrl","_Constants$expoConfig","_Constants$__unsafeNo","window","location","origin","legacyExpoProjectFullName","expoConfig","originalFullName","__unsafeNoWarnManifest","nextSteps","__DEV__","executionEnvironment","Bare","StoreClient","manifest2","Error","redirectUrl","BASE_URL","warnIfAnonymous","_Constants$expoConfig2","_hostUri","hostUri","linkingUri","removeScheme","replace","undefined","uriParts","split","parse","_unused","id","url","startsWith","console","warn"],"sources":["/Users/nika/Documents/GitHub/AI_quiz_generatorold/node_modules/expo-auth-session/src/SessionUrlProvider.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nimport qs, { ParsedQs } from 'qs';\n\nexport class SessionUrlProvider {\n  private static readonly BASE_URL = `https://auth.expo.io`;\n  private static readonly SESSION_PATH = 'expo-auth-session';\n\n  getDefaultReturnUrl(\n    urlPath?: string,\n    options?: Omit<Linking.CreateURLOptions, 'queryParams'>\n  ): string {\n    const queryParams = SessionUrlProvider.getHostAddressQueryParams();\n    let path = SessionUrlProvider.SESSION_PATH;\n    if (urlPath) {\n      path = [path, SessionUrlProvider.removeLeadingSlash(urlPath)].filter(Boolean).join('/');\n    }\n\n    return Linking.createURL(path, {\n      // The redirect URL doesn't matter for the proxy as long as it's valid, so silence warnings if needed.\n      scheme: options?.scheme ?? Linking.resolveScheme({ isSilent: true }),\n      queryParams,\n      isTripleSlashed: options?.isTripleSlashed,\n    });\n  }\n\n  getStartUrl(authUrl: string, returnUrl: string, projectNameForProxy: string | undefined): string {\n    if (Platform.OS === 'web' && !Platform.isDOMAvailable) {\n      // Return nothing in SSR envs\n      return '';\n    }\n    const queryString = qs.stringify({\n      authUrl,\n      returnUrl,\n    });\n\n    return `${this.getRedirectUrl({ projectNameForProxy })}/start?${queryString}`;\n  }\n\n  getRedirectUrl(options: { projectNameForProxy?: string; urlPath?: string }): string {\n    if (Platform.OS === 'web') {\n      if (Platform.isDOMAvailable) {\n        return [window.location.origin, options.urlPath].filter(Boolean).join('/');\n      } else {\n        // Return nothing in SSR envs\n        return '';\n      }\n    }\n\n    const legacyExpoProjectFullName =\n      options.projectNameForProxy ||\n      Constants.expoConfig?.originalFullName ||\n      Constants.__unsafeNoWarnManifest?.originalFullName;\n\n    if (!legacyExpoProjectFullName) {\n      let nextSteps = '';\n      if (__DEV__) {\n        if (Constants.executionEnvironment === ExecutionEnvironment.Bare) {\n          nextSteps =\n            ' Please ensure you have the latest version of expo-constants installed and rebuild your native app. You can verify that originalFullName is defined by running `expo config --type public` and inspecting the output.';\n        } else if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n          nextSteps =\n            ' Please report this as a bug with the contents of `expo config --type public`.';\n        }\n      }\n\n      if (Constants.manifest2) {\n        nextSteps =\n          ' Prefer AuthRequest in combination with an Expo Development Client build of your application.' +\n          ' To continue using the AuthSession proxy, specify the project full name (@owner/slug) using the projectNameForProxy option.';\n      }\n\n      throw new Error(\n        'Cannot use the AuthSession proxy because the project full name is not defined.' + nextSteps\n      );\n    }\n\n    const redirectUrl = `${SessionUrlProvider.BASE_URL}/${legacyExpoProjectFullName}`;\n    if (__DEV__) {\n      SessionUrlProvider.warnIfAnonymous(legacyExpoProjectFullName, redirectUrl);\n      // TODO: Verify with the dev server that the manifest is up to date.\n    }\n    return redirectUrl;\n  }\n\n  private static getHostAddressQueryParams(): ParsedQs | undefined {\n    let hostUri: string | undefined = Constants.expoConfig?.hostUri;\n    if (\n      !hostUri &&\n      (ExecutionEnvironment.StoreClient === Constants.executionEnvironment ||\n        Linking.resolveScheme({}))\n    ) {\n      if (!Constants.linkingUri) {\n        hostUri = '';\n      } else {\n        // we're probably not using up-to-date xdl, so just fake it for now\n        // we have to remove the /--/ on the end since this will be inserted again later\n        hostUri = SessionUrlProvider.removeScheme(Constants.linkingUri).replace(/\\/--(\\/.*)?$/, '');\n      }\n    }\n\n    if (!hostUri) {\n      return undefined;\n    }\n\n    const uriParts = hostUri?.split('?');\n    try {\n      return qs.parse(uriParts?.[1]);\n    } catch {}\n\n    return undefined;\n  }\n\n  private static warnIfAnonymous(id, url): void {\n    if (id.startsWith('@anonymous/')) {\n      console.warn(\n        `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires adding redirect URLs to an allow list, we recommend that you do not add this URL -- instead, you should sign in to Expo to acquire a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n      );\n    }\n  }\n\n  private static removeScheme(url: string) {\n    return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n  }\n\n  private static removeLeadingSlash(url: string) {\n    return url.replace(/^\\//, '');\n  }\n}\n\nexport default new SessionUrlProvider();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}