{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Picker } from '@react-native-picker/picker';\nimport spanishAdjectiveData from \"./data/adjectives-spanish.json\";\nimport spanishAdverbData from \"./data/adverbs-spanish.json\";\nimport spanishEmojiData from \"./data/emoji-spanish.json\";\nimport spanishNounData from \"./data/nouns-spanish.json\";\nimport spanishQuizData from \"./data/spanishquiz.json\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar quizOptions = [{\n  value: 'Select',\n  label: 'Select'\n}, {\n  value: 'Subjunctive',\n  label: 'Subjunctive'\n}, {\n  value: 'Conjugation',\n  label: 'Conjugation'\n}, {\n  value: 'Imperative',\n  label: 'Imperative'\n}, {\n  value: 'emoji',\n  label: 'Emoji'\n}, {\n  value: 'noun',\n  label: 'Noun'\n}, {\n  value: 'adjective',\n  label: 'Adjective'\n}, {\n  value: 'adverb',\n  label: 'Adverb'\n}];\nvar QuizComponent = function QuizComponent(_ref) {\n  var name = _ref.name,\n    email = _ref.email;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    correctAnswer = _useState2[0],\n    setCorrectAnswer = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedAnswer = _useState4[0],\n    setSelectedAnswer = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showAnswersVisibility = _useState6[0],\n    setShowAnswersVisibility = _useState6[1];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    answerCorrectness = _useState8[0],\n    setAnswerCorrectness = _useState8[1];\n  var _useState9 = useState(null),\n    _useState10 = _slicedToArray(_useState9, 1),\n    correctSpanish = _useState10[0];\n  var inputRefs = useRef([]);\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    answersChecked = _useState12[0],\n    setAnswersChecked = _useState12[1];\n  var _useState13 = useState(function () {\n      return formattedQuestions.map(function () {\n        return \"\";\n      });\n    }),\n    _useState14 = _slicedToArray(_useState13, 2),\n    userAnswers = _useState14[0],\n    setUserAnswers = _useState14[1];\n  var _useState15 = useState(false),\n    _useState16 = _slicedToArray(_useState15, 2),\n    showQuiz = _useState16[0],\n    setShowQuiz = _useState16[1];\n  var _useState17 = useState(false),\n    _useState18 = _slicedToArray(_useState17, 2),\n    hasSelected = _useState18[0],\n    setHasSelected = _useState18[1];\n  var _useState19 = useState(\"\"),\n    _useState20 = _slicedToArray(_useState19, 2),\n    quizQuestion = _useState20[0],\n    setQuizQuestion = _useState20[1];\n  var _useState21 = useState([]),\n    _useState22 = _slicedToArray(_useState21, 2),\n    quizAnswer = _useState22[0],\n    setQuizAnswer = _useState22[1];\n  var _useState23 = useState('Select'),\n    _useState24 = _slicedToArray(_useState23, 2),\n    selectedOption = _useState24[0],\n    setSelectedOption = _useState24[1];\n  var setLanguage = \"spanish\";\n  var _useState25 = useState(false),\n    _useState26 = _slicedToArray(_useState25, 2),\n    loading = _useState26[0],\n    setLoading = _useState26[1];\n  var _useState27 = useState({}),\n    _useState28 = _slicedToArray(_useState27, 2),\n    feedback = _useState28[0],\n    setFeedback = _useState28[1];\n  var _useState29 = useState(null),\n    _useState30 = _slicedToArray(_useState29, 2),\n    quizData = _useState30[0],\n    setQuizData = _useState30[1];\n  var _useState31 = useState(false),\n    _useState32 = _slicedToArray(_useState31, 2),\n    showAnswers = _useState32[0],\n    setShowAnswers = _useState32[1];\n  var _useState33 = useState([]),\n    _useState34 = _slicedToArray(_useState33, 2),\n    formattedQuestions = _useState34[0],\n    setFormattedQuestions = _useState34[1];\n  var _useState35 = useState('example@email.com'),\n    _useState36 = _slicedToArray(_useState35, 2),\n    userEmail = _useState36[0],\n    setUserEmail = _useState36[1];\n  var _useState37 = useState('beginner'),\n    _useState38 = _slicedToArray(_useState37, 2),\n    difficulty = _useState38[0],\n    setDifficulty = _useState38[1];\n  var _useState39 = useState('Subjunctive'),\n    _useState40 = _slicedToArray(_useState39, 2),\n    quizType = _useState40[0],\n    setQuizType = _useState40[1];\n  var handleStartQuiz = function handleStartQuiz() {\n    setShowAnswersVisibility(false);\n    setAnswersChecked(false);\n    if (!spanishQuizData[difficulty] || !spanishQuizData[difficulty][quizType]) {\n      alert(\"No quiz data available for the selected difficulty and type.\");\n      return;\n    }\n    var availableSentences = spanishQuizData[difficulty][quizType];\n    if (availableSentences.length < 5) {\n      alert(\"Not enough sentences available for the selected difficulty and type.\");\n      return;\n    }\n    var selectedSentences = [];\n    while (selectedSentences.length < 5) {\n      var randomIndex = Math.floor(Math.random() * availableSentences.length);\n      if (!selectedSentences.includes(availableSentences[randomIndex])) {\n        selectedSentences.push(availableSentences[randomIndex]);\n      }\n    }\n    setFormattedQuestions(selectedSentences);\n    setAnswerCorrectness([]);\n  };\n  useEffect(function () {\n    var fetchUserPreferences = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          if (!email) return;\n          var response = yield fetch(`https://skeba.info/netlify/get-biography.php?email=${email}`);\n          var data = yield response.json();\n          if (data) {\n            setDifficulty(data.difficulty || \"beginner\");\n            console.log(data.difficulty);\n          }\n        } catch (error) {\n          console.error('Error fetching user preferences:', error);\n        }\n      });\n      return function fetchUserPreferences() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    fetchUserPreferences();\n  }, [email]);\n  var generateQuizAdj = function generateQuizAdj() {\n    console.log(selectedOption);\n    var dataGroup;\n    if (selectedOption === \"adjective\") {\n      dataGroup = spanishAdjectiveData[difficulty];\n    }\n    if (selectedOption === \"adverb\") {\n      dataGroup = spanishAdverbData[difficulty];\n    }\n    if (selectedOption === \"emoji\") {\n      dataGroup = spanishEmojiData[difficulty];\n    }\n    if (selectedOption === \"noun\") {\n      dataGroup = spanishNounData[difficulty];\n    }\n    if (!dataGroup || dataGroup.length === 0) {\n      alert(\"No quiz data available for the selected difficulty and type.\");\n      return;\n    }\n    var randomDataIndex = Math.floor(Math.random() * dataGroup.length);\n    var data = dataGroup[randomDataIndex];\n    var pairs = Object.entries(data);\n    var randomIndex = Math.floor(Math.random() * pairs.length);\n    var _pairs$randomIndex = _slicedToArray(pairs[randomIndex], 2),\n      correctSpanish = _pairs$randomIndex[0],\n      correctEnglish = _pairs$randomIndex[1];\n    pairs.splice(randomIndex, 1);\n    var distractors = [];\n    for (var i = 0; i < 3; i++) {\n      var distractorIndex = Math.floor(Math.random() * pairs.length);\n      distractors.push(pairs[distractorIndex][0]);\n      pairs.splice(distractorIndex, 1);\n    }\n    var options = [correctSpanish].concat(distractors);\n    for (var _i = options.length - 1; _i > 0; _i--) {\n      var j = Math.floor(Math.random() * (_i + 1));\n      var _ref3 = [options[j], options[_i]];\n      options[_i] = _ref3[0];\n      options[j] = _ref3[1];\n    }\n    console.log(\"correct\", correctEnglish);\n    console.log(\"correct\", correctSpanish);\n    console.log(options);\n    setCorrectAnswer(correctSpanish);\n    var newQuest = correctEnglish;\n    var newOptions = options;\n    setQuizQuestion(newQuest);\n    setQuizAnswer(newOptions);\n    console.log(\"question\", setCorrectAnswer);\n    console.log(\"answer\", newOptions);\n    setShowQuiz(true);\n  };\n  var handleCheckAnswers = function handleCheckAnswers() {\n    if (answersChecked) {\n      setAnswerCorrectness([]);\n    } else {\n      var correctnessArray = formattedQuestions.map(function (question, index) {\n        var userAnswer = (userAnswers[index] || \"\").toLowerCase();\n        var correctAnswer = (question.answer || \"\").toLowerCase();\n        return userAnswer === correctAnswer;\n      });\n      setAnswerCorrectness(correctnessArray);\n    }\n    setAnswersChecked(function (prevState) {\n      return !prevState;\n    });\n  };\n  var renderAdjectiveQuiz = function renderAdjectiveQuiz() {\n    if (!quizQuestion) return null;\n    console.log(\"correctspanish\", correctSpanish);\n    var isCorrect = function isCorrect(option) {\n      return hasSelected && option === selectedAnswer && option === correctAnswer;\n    };\n    var isIncorrect = function isIncorrect(option) {\n      return hasSelected && option === selectedAnswer && option !== correctAnswer;\n    };\n    return _jsxs(View, {\n      style: {\n        marginVertical: 20\n      },\n      children: [_jsx(Text, {\n        style: {\n          fontSize: 18,\n          fontWeight: 'bold'\n        },\n        children: quizQuestion\n      }), _jsx(FlatList, {\n        data: quizAnswer,\n        renderItem: function renderItem(_ref4) {\n          var item = _ref4.item;\n          return _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              setSelectedAnswer(item);\n              setHasSelected(true);\n              console.log(\"Selected:\", item);\n              console.log(\"Correct:\", correctSpanish);\n            },\n            style: {\n              padding: 10,\n              backgroundColor: isCorrect(item) ? 'green' : isIncorrect(item) ? 'red' : 'transparent'\n            },\n            children: _jsx(Text, {\n              style: {\n                fontSize: 16\n              },\n              children: item\n            })\n          });\n        },\n        keyExtractor: function keyExtractor(item, index) {\n          return index.toString();\n        }\n      })]\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.header,\n      children: \"Quiz Options\"\n    }), _jsx(Picker, {\n      selectedValue: selectedOption,\n      onValueChange: function onValueChange(itemValue) {\n        setSelectedOption(itemValue);\n        setQuizType(itemValue);\n        setFormattedQuestions([]);\n      },\n      style: _objectSpread(_objectSpread({}, styles.picker), {}, {\n        height: 50,\n        width: 200,\n        backgroundColor: '#f8f8f8'\n      }),\n      children: quizOptions.map(function (option) {\n        return _jsx(Picker.Item, {\n          label: option.label,\n          value: option.value,\n          style: styles.pickerItem\n        }, option.value);\n      })\n    }), (selectedOption === \"adjective\" || selectedOption === \"adverb\" || selectedOption === \"noun\" || selectedOption === \"emoji\") && _jsxs(View, {\n      children: [_jsx(Button, {\n        title: \"Generate Quiz\",\n        onPress: generateQuizAdj\n      }), showQuiz && renderAdjectiveQuiz()]\n    }), (selectedOption === \"Conjugation\" || selectedOption === \"Imperative\" || selectedOption === \"Subjunctive\") && _jsx(Button, {\n      title: \"Start Quiz\",\n      onPress: handleStartQuiz\n    }), (selectedOption === \"Conjugation\" || selectedOption === \"Imperative\" || selectedOption === \"Subjunctive\") && _jsx(Button, {\n      title: \"Start Quiz\",\n      onPress: handleStartQuiz\n    }), formattedQuestions.map(function (question, index) {\n      var _question$sentence$sp = question.sentence.split(/[\\(\\)]/),\n        _question$sentence$sp2 = _slicedToArray(_question$sentence$sp, 3),\n        start = _question$sentence$sp2[0],\n        middle = _question$sentence$sp2[1],\n        end = _question$sentence$sp2[2];\n      return _jsxs(View, {\n        style: {\n          flexDirection: 'column',\n          alignItems: 'flex-start',\n          marginVertical: 5\n        },\n        children: [_jsxs(View, {\n          style: {\n            flexDirection: 'row',\n            alignItems: 'center'\n          },\n          children: [_jsx(Text, {\n            children: start\n          }), _jsx(TextInput, {\n            ref: function ref(el) {\n              return inputRefs.current[index] = el;\n            },\n            value: userAnswers[index] || \"\",\n            onChangeText: function onChangeText(text) {\n              var updatedAnswers = _toConsumableArray(userAnswers);\n              updatedAnswers[index] = text;\n              setUserAnswers(updatedAnswers);\n            },\n            style: {\n              borderWidth: 1,\n              borderColor: 'gray',\n              paddingHorizontal: 5,\n              marginHorizontal: 5,\n              backgroundColor: answerCorrectness[index] === true ? 'green' : answerCorrectness[index] === false ? 'red' : 'white'\n            },\n            placeholder: middle\n          }), _jsx(Text, {\n            children: end\n          })]\n        }), showAnswersVisibility && _jsxs(Text, {\n          style: {\n            marginTop: 5\n          },\n          children: [\"Answer: \", question.answer.charAt(0).toUpperCase() + question.answer.slice(1)]\n        })]\n      }, index);\n    }), formattedQuestions.length > 0 && _jsxs(View, {\n      style: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        marginTop: 10\n      },\n      children: [_jsx(View, {\n        style: {\n          marginRight: 5\n        },\n        children: _jsx(Button, {\n          title: answersChecked ? \"Reset Answers\" : \"Check Answers\",\n          onPress: handleCheckAnswers\n        })\n      }), _jsx(Button, {\n        title: showAnswersVisibility ? \"Hide Answers\" : \"Show Answers\",\n        onPress: function onPress() {\n          return setShowAnswersVisibility(function (prevState) {\n            return !prevState;\n          });\n        }\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: '#f5f5f5',\n    alignItems: 'center'\n  },\n  header: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 20\n  },\n  picker: {\n    width: 250,\n    height: 50,\n    borderColor: '#ccc',\n    borderWidth: 1,\n    borderRadius: 5,\n    marginBottom: 20,\n    backgroundColor: '#f8f8f8'\n  },\n  pickerItem: {\n    fontSize: 18\n  },\n  input: {\n    width: 200,\n    height: 40,\n    borderColor: '#ccc',\n    borderWidth: 1,\n    borderRadius: 5,\n    paddingHorizontal: 10,\n    marginBottom: 20,\n    fontSize: 16\n  },\n  listItem: {\n    padding: 10,\n    marginVertical: 5,\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: '#ddd'\n  },\n  correctAnswer: {\n    backgroundColor: 'green'\n  },\n  incorrectAnswer: {\n    backgroundColor: 'red'\n  },\n  Button: {\n    backgroundColor: 'red'\n  }\n});\nexport default QuizComponent;","map":{"version":3,"names":["React","useState","useEffect","useRef","View","Text","StyleSheet","Button","TextInput","FlatList","TouchableOpacity","Picker","spanishAdjectiveData","spanishAdverbData","spanishEmojiData","spanishNounData","spanishQuizData","jsx","_jsx","jsxs","_jsxs","quizOptions","value","label","QuizComponent","_ref","name","email","_useState","_useState2","_slicedToArray","correctAnswer","setCorrectAnswer","_useState3","_useState4","selectedAnswer","setSelectedAnswer","_useState5","_useState6","showAnswersVisibility","setShowAnswersVisibility","_useState7","_useState8","answerCorrectness","setAnswerCorrectness","_useState9","_useState10","correctSpanish","inputRefs","_useState11","_useState12","answersChecked","setAnswersChecked","_useState13","formattedQuestions","map","_useState14","userAnswers","setUserAnswers","_useState15","_useState16","showQuiz","setShowQuiz","_useState17","_useState18","hasSelected","setHasSelected","_useState19","_useState20","quizQuestion","setQuizQuestion","_useState21","_useState22","quizAnswer","setQuizAnswer","_useState23","_useState24","selectedOption","setSelectedOption","setLanguage","_useState25","_useState26","loading","setLoading","_useState27","_useState28","feedback","setFeedback","_useState29","_useState30","quizData","setQuizData","_useState31","_useState32","showAnswers","setShowAnswers","_useState33","_useState34","setFormattedQuestions","_useState35","_useState36","userEmail","setUserEmail","_useState37","_useState38","difficulty","setDifficulty","_useState39","_useState40","quizType","setQuizType","handleStartQuiz","alert","availableSentences","length","selectedSentences","randomIndex","Math","floor","random","includes","push","fetchUserPreferences","_ref2","_asyncToGenerator","response","fetch","data","json","console","log","error","apply","arguments","generateQuizAdj","dataGroup","randomDataIndex","pairs","Object","entries","_pairs$randomIndex","correctEnglish","splice","distractors","i","distractorIndex","options","concat","j","_ref3","newQuest","newOptions","handleCheckAnswers","correctnessArray","question","index","userAnswer","toLowerCase","answer","prevState","renderAdjectiveQuiz","isCorrect","option","isIncorrect","style","marginVertical","children","fontSize","fontWeight","renderItem","_ref4","item","onPress","padding","backgroundColor","keyExtractor","toString","styles","container","header","selectedValue","onValueChange","itemValue","_objectSpread","picker","height","width","Item","pickerItem","title","_question$sentence$sp","sentence","split","_question$sentence$sp2","start","middle","end","flexDirection","alignItems","ref","el","current","onChangeText","text","updatedAnswers","_toConsumableArray","borderWidth","borderColor","paddingHorizontal","marginHorizontal","placeholder","marginTop","charAt","toUpperCase","slice","justifyContent","marginRight","create","flex","color","marginBottom","borderRadius","input","listItem","incorrectAnswer"],"sources":["/Users/nika/Documents/GitHub/AI_quiz_generatorold/QuizComponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { View, Text, StyleSheet, Button, TextInput,  FlatList, TouchableOpacity  } from 'react-native';\nimport { Picker } from '@react-native-picker/picker';\nimport spanishAdjectiveData from './data/adjectives-spanish.json'; // Import the data from the adjectives-spanish.js\nimport spanishAdverbData from './data/adverbs-spanish.json'; // Import the data from the adjectives-spanish.js\nimport spanishEmojiData from './data/emoji-spanish.json'; // Import the data from the adjectives-spanish.js\nimport spanishNounData from './data/nouns-spanish.json'; // Import the data from the adjectives-spanish.js\n\nimport spanishQuizData from './data/spanishquiz.json';\n\nconst quizOptions = [\n    { value: 'Select', label: 'Select' },\n    { value: 'Subjunctive', label: 'Subjunctive' },\n    { value: 'Conjugation', label: 'Conjugation' },\n    { value: 'Imperative', label: 'Imperative' },\n    { value: 'emoji', label: 'Emoji' },\n    { value: 'noun', label: 'Noun' },\n    { value: 'adjective', label: 'Adjective' },\n    { value: 'adverb', label: 'Adverb' }\n];\n\nconst QuizComponent = ({ name, email }) => {\n    const [correctAnswer, setCorrectAnswer] = useState(null);\n\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\n    const [showAnswersVisibility, setShowAnswersVisibility] = useState(false);\nconst [answerCorrectness, setAnswerCorrectness] = useState([]);\n const [correctSpanish] = useState(null);\nconst inputRefs = useRef([]);\nconst [answersChecked, setAnswersChecked] = useState(false);\n    const [userAnswers, setUserAnswers] = useState(() => \n        formattedQuestions.map(() => \"\") // Initialize with an array of empty strings\n    );\nconst [showQuiz, setShowQuiz] = useState(false);\nconst [hasSelected, setHasSelected] = useState(false);\nconst [quizQuestion, setQuizQuestion] = useState(\"\");\nconst [quizAnswer, setQuizAnswer] = useState([]);     const [selectedOption, setSelectedOption] = useState('Select');\n     const setLanguage = \"spanish\";\n    const [loading, setLoading] = useState(false);\n    const [feedback, setFeedback] = useState({});\n    const [quizData, setQuizData] = useState(null);\n    const [showAnswers, setShowAnswers] = useState(false);\n  const [formattedQuestions, setFormattedQuestions] = useState([]);\n    const [userEmail, setUserEmail] = useState('example@email.com'); // Dummy for now\n    const [difficulty, setDifficulty] = useState('beginner'); // Dummy for now, you may want to change this\nconst [quizType, setQuizType] = useState('Subjunctive');\n\n\nconst handleStartQuiz = () => {\n    setShowAnswersVisibility(false);\nsetAnswersChecked(false);\n\n    if (!spanishQuizData[difficulty] || !spanishQuizData[difficulty][quizType]) {\n        alert(\"No quiz data available for the selected difficulty and type.\");\n        return;\n    }\n    \n    const availableSentences = spanishQuizData[difficulty][quizType];\n    if (availableSentences.length < 5) {\n        alert(\"Not enough sentences available for the selected difficulty and type.\");\n        return;\n    }\n    \n    const selectedSentences = [];\n    while (selectedSentences.length < 5) {\n        const randomIndex = Math.floor(Math.random() * availableSentences.length);\n        if (!selectedSentences.includes(availableSentences[randomIndex])) {\n            selectedSentences.push(availableSentences[randomIndex]);\n        }\n    }\n    \n    setFormattedQuestions(selectedSentences);\n    setAnswerCorrectness([]);\n};\n\n    useEffect(() => {\n        const fetchUserPreferences = async () => {\n            try {\n                if (!email) return; // Use email directly\n                const response = await fetch(`https://skeba.info/netlify/get-biography.php?email=${email}`);\n                const data = await response.json();\n                if (data) {\n        \n                    setDifficulty(data.difficulty || \"beginner\");\n                \n                    console.log(data.difficulty);\n                }\n            } catch (error) {\n                console.error('Error fetching user preferences:', error);\n            }\n        };\n\n        fetchUserPreferences();\n    }, [email]);\nconst generateQuizAdj = () => {\nconsole.log(selectedOption);\nlet dataGroup\nif (selectedOption === \"adjective\") { // Use '===' for strict equality checking\n    dataGroup = spanishAdjectiveData[difficulty];\n}\nif (selectedOption === \"adverb\") { // Use '===' for strict equality checking\n    dataGroup = spanishAdverbData[difficulty];\n}\nif (selectedOption === \"emoji\") { // Use '===' for strict equality checking\n    dataGroup = spanishEmojiData[difficulty];\n}\nif (selectedOption === \"noun\") { // Use '===' for strict equality checking\n    dataGroup = spanishNounData[difficulty];\n}\n    if (!dataGroup || dataGroup.length === 0) {\n        alert(\"No quiz data available for the selected difficulty and type.\");\n        return;\n    }\n\n  // Randomly select an object from the dataGroup\n    const randomDataIndex = Math.floor(Math.random() * dataGroup.length);\n    const data = dataGroup[randomDataIndex];\n\n    // Convert data to array of [spanish, english] pairs\n    const pairs = Object.entries(data);\n\n    // Randomly select a pair for the correct answer\n    const randomIndex = Math.floor(Math.random() * pairs.length);\n    const [correctSpanish, correctEnglish] = pairs[randomIndex];\n\n    // Remove the correct answer from the list\n    pairs.splice(randomIndex, 1);\n\n    // Randomly select 3 distractors\n    const distractors = [];\n    for (let i = 0; i < 3; i++) {\n        const distractorIndex = Math.floor(Math.random() * pairs.length);\n        distractors.push(pairs[distractorIndex][0]);\n        pairs.splice(distractorIndex, 1);\n    }\n\n    // Create an array with the correct answer and the distractors\n    const options = [correctSpanish, ...distractors];\n\n    // Shuffle the options\n    for (let i = options.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [options[i], options[j]] = [options[j], options[i]];\n    }\nconsole.log(\"correct\",correctEnglish);\nconsole.log(\"correct\",correctSpanish);\nconsole.log(options);\nsetCorrectAnswer(correctSpanish);\n    // Convert to constants\n    const newQuest = correctEnglish;\n    const newOptions = options;\nsetQuizQuestion(newQuest);\nsetQuizAnswer(newOptions);\nconsole.log(\"question\", setCorrectAnswer);\n   console.log(\"answer\",newOptions);\nsetShowQuiz(true);\n};  \nconst handleCheckAnswers = () => {\n    if (answersChecked) {\n        setAnswerCorrectness([]); // Clear the answer correctness array\n    } else {\n        const correctnessArray = formattedQuestions.map((question, index) => {\n            const userAnswer = (userAnswers[index] || \"\").toLowerCase();\n            const correctAnswer = (question.answer || \"\").toLowerCase();\n            return userAnswer === correctAnswer;\n        });\n        setAnswerCorrectness(correctnessArray);\n    }\n    setAnswersChecked(prevState => !prevState); // Toggle the answersChecked state\n};\n\nconst renderAdjectiveQuiz = () => {\n\n    if (!quizQuestion) return null;\nconsole.log(\"correctspanish\",correctSpanish);\n   const isCorrect = (option) => hasSelected && option === selectedAnswer && option === correctAnswer;\nconst isIncorrect = (option) => hasSelected && option === selectedAnswer && option !== correctAnswer;\n\n\n    return (\n        <View style={{ marginVertical: 20 }}>\n            <Text style={{ fontSize: 18, fontWeight: 'bold' }}>\n                {quizQuestion}\n            </Text>\n            <FlatList\n                data={quizAnswer}\n                renderItem={({ item }) => (\n                    <TouchableOpacity \n                        onPress={() => {\n                            setSelectedAnswer(item);\n                            setHasSelected(true);\n                                    console.log(\"Selected:\", item);\n        console.log(\"Correct:\", correctSpanish);\n                        }}\n                        style={{\n                            padding: 10,\n                            backgroundColor: isCorrect(item) ? 'green' : (isIncorrect(item) ? 'red' : 'transparent')\n                        }}\n                    >\n                        <Text style={{ fontSize: 16 }}>\n                            {item}\n                        </Text>\n                    </TouchableOpacity>\n                )}\n                keyExtractor={(item, index) => index.toString()}\n            />\n        </View>\n    );\n};\n\n\n\n    return (\n<View style={styles.container}>\n\n\n\n            <Text style={styles.header}>Quiz Options</Text>\n          <Picker\n    selectedValue={selectedOption}\n    onValueChange={(itemValue) => {\n        setSelectedOption(itemValue);\n        setQuizType(itemValue);\n                setFormattedQuestions([]); // Reset the formattedQuestions state when a new option is selected\n\n    }}\n    style={{ ...styles.picker, height: 50, width: 200, backgroundColor: '#f8f8f8' }}\n>\n    {quizOptions.map(option => (\n        <Picker.Item \n            key={option.value} \n            label={option.label} \n            value={option.value} \n            style={styles.pickerItem} \n        />\n    ))}\n</Picker>\n{(selectedOption === \"adjective\" || selectedOption === \"adverb\" || selectedOption === \"noun\" || selectedOption === \"emoji\") && (\n    <View>\n        <Button title=\"Generate Quiz\" onPress={generateQuizAdj} />\n        {showQuiz && renderAdjectiveQuiz()}\n    </View>\n)}\n            {(selectedOption === \"Conjugation\" || selectedOption === \"Imperative\" || selectedOption === \"Subjunctive\") && (\n         <Button title=\"Start Quiz\" onPress={handleStartQuiz} />\n\n\n            )}\n         \n\n\n   {(selectedOption === \"Conjugation\" || selectedOption === \"Imperative\" || selectedOption === \"Subjunctive\") && (\n                <Button title=\"Start Quiz\" onPress={handleStartQuiz} />\n            )}\n             \n            {formattedQuestions.map((question, index) => {\n                const [start, middle, end] = question.sentence.split(/[\\(\\)]/);\n                return (\n                    <View key={index} style={{ flexDirection: 'column', alignItems: 'flex-start', marginVertical: 5 }}>\n                        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                            <Text>{start}</Text>\n                            <TextInput\n                                ref={el => inputRefs.current[index] = el}\n                                value={userAnswers[index] || \"\"} // Ensure value is never undefined or null\n                                onChangeText={(text) => {\n                                    const updatedAnswers = [...userAnswers];\n                                    updatedAnswers[index] = text;\n                                    setUserAnswers(updatedAnswers);\n                                }}\n                                style={{ \n                                    borderWidth: 1, \n                                    borderColor: 'gray', \n                                    paddingHorizontal: 5, \n                                    marginHorizontal: 5,\n                                    backgroundColor: answerCorrectness[index] === true ? 'green' : (answerCorrectness[index] === false ? 'red' : 'white')\n                                }}\n                                placeholder={middle}\n                            />\n                            <Text>{end}</Text>\n                        </View>\n                        {showAnswersVisibility && <Text style={{ marginTop: 5 }}>Answer: {question.answer.charAt(0).toUpperCase() + question.answer.slice(1)}</Text>}\n                    </View>\n                );\n            })}\n\n            {formattedQuestions.length > 0 && (\n                <View style={{flexDirection: 'row', justifyContent: 'space-between', marginTop: 10 }}>\n                    <View style={{ marginRight: 5, }}>\n                        <Button title={answersChecked ? \"Reset Answers\" : \"Check Answers\"} onPress={handleCheckAnswers} />\n                    </View>\n                    <Button title={showAnswersVisibility ? \"Hide Answers\" : \"Show Answers\"} onPress={() => setShowAnswersVisibility(prevState => !prevState)} />\n                </View>\n            )}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        padding: 20,\n        backgroundColor: '#f5f5f5',\n        alignItems: 'center',\n    },\n    header: {\n        fontSize: 28,\n        fontWeight: 'bold',\n        color: '#333',\n        marginBottom: 20,\n    },\n    picker: {\n        width: 250,\n        height: 50,\n        borderColor: '#ccc',\n        borderWidth: 1,\n        borderRadius: 5,\n        marginBottom: 20,\n        backgroundColor: '#f8f8f8',\n    },\n    pickerItem: {\n        fontSize: 18,\n    },\n    input: {\n        width: 200,\n        height: 40,\n        borderColor: '#ccc',\n        borderWidth: 1,\n        borderRadius: 5,\n        paddingHorizontal: 10,\n        marginBottom: 20,\n        fontSize: 16,\n    },\n    listItem: {\n        padding: 10,\n        marginVertical: 5,\n        borderWidth: 1,\n        borderRadius: 5,\n        borderColor: '#ddd',\n    },\n    correctAnswer: {\n        backgroundColor: 'green',\n    },\n    incorrectAnswer: {\n        backgroundColor: 'red',\n    },\n    Button: {\n        backgroundColor: 'red',\n    },\n});\n\nexport default QuizComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}