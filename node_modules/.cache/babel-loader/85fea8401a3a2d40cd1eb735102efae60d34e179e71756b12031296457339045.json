{"ast":null,"code":"var _jsxFileName = \"/Users/nika/Documents/GitHub/AI_quiz_generator/src/QuizComponent.js\",\n  _s = $RefreshSig$();\n//QuizComponent.js\nimport React, { useState } from 'react';\nimport './QuizComponent.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pattern_with_prefix = /(.*?)\\(([^()]+)\\)([^()]+)\\(([^()]+)\\)/;\nconst QuizComponent = ({\n  difficulty,\n  language\n}) => {\n  _s();\n  const [quizData, setQuizData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showAnswers, setShowAnswers] = useState(false); // New state variable\n  const [feedback, setFeedback] = useState({}); // New state to store feedback for each question\n  const [quizType, setQuizType] = useState('Subjunctive'); // New state for quiz type\n\n  const generateNewQuiz = async () => {\n    setLoading(true);\n\n    // Reset the feedback state\n    setFeedback({});\n\n    // Clear input boxes\n    for (let i = 0; i < 5; i++) {\n      // Assuming you know there are always 5 questions; adjust if variable\n      const inputElement = document.getElementById(`input-${i}`);\n      if (inputElement) {\n        inputElement.value = '';\n      }\n    }\n\n    // Determine the content based on the selected quiz type\n    let userContent;\n    if (quizType === 'Imperative') {\n      userContent = `generate 5 complete ${language} ${difficulty} imperative sentences with the ${language} sentence verb unconjugated inside a () and the conjugated ${language} answer at the end in () for example '1.(venir) a la fiesta. (venga)'  output only sentences 1 to 5`;\n    } else if (quizType === 'Subjunctive') {\n      userContent = `generate 5 complete ${language} ${difficulty} subjunctive sentences with the ${language} sentence verb unconjugated inside a () and the conjugated ${language} answer at the end in () for example '1. Es probable que Juan (venir) a la fiesta. (venga)'  output only sentences 1 to 5`;\n    } else if (quizType === 'Basic Conjugation') {\n      userContent = `generate 5 basic ${language} ${difficulty} present tense sentences with the ${language} sentence verb unconjugated inside a () and the conjugated ${language} answer at the end in () for example '1. Juan (venir) a la fiesta. (viene)'  output only sentences 1 to 5`;\n    }\n    try {\n      const EXTERNAL_API_ENDPOINT = '/.netlify/functions/getQuizQuestions';\n      const payload = {\n        userContent: userContent\n      };\n      const response = await axios.post(EXTERNAL_API_ENDPOINT, payload, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = response.data;\n      setQuizData(data);\n      setLoading(false);\n      setShowAnswers(false);\n    } catch (error) {\n      console.error(\"Error fetching quiz data:\", error);\n      setLoading(false);\n      setShowAnswers(false);\n    }\n  };\n  const checkAnswers = () => {\n    let newFeedback = {};\n    if (!quizData || !quizData.choices || !quizData.choices[0] || !quizData.choices[0].message) {\n      console.error(\"Invalid quiz data\");\n      return;\n    }\n    const lines = quizData.choices[0].message.content.split('\\n');\n    lines.forEach((line, index) => {\n      let match = pattern_with_prefix.exec(line);\n      if (!match) return;\n      let answer = match[4]; // Extracting the answer from the matched groups\n\n      let inputElement = document.getElementById(`input-${index}`);\n      let userInput = inputElement ? inputElement.value : null;\n      if (userInput.toLowerCase() === answer.toLowerCase()) {\n        newFeedback[index] = \"correct\";\n      } else {\n        newFeedback[index] = \"wrong\";\n      }\n    });\n    setFeedback(newFeedback);\n  };\n  const formatQuestions = data => {\n    let renderedQuestions = [];\n    if (data && data.choices && data.choices[0] && data.choices[0].message) {\n      let content = data.choices[0].message.content;\n      const questionAnswerPairs = content.split('\\n');\n      questionAnswerPairs.forEach((pair, index) => {\n        // Extract the prefix, question, and answer from the pair using the updated regex pattern\n        let match = pattern_with_prefix.exec(pair);\n        if (!match) return;\n        let prefix = match[1].trim();\n        let verb = match[2];\n        let questionContent = match[3].trim();\n        let answer = match[4];\n        let feedbackElement = null;\n        if (feedback[index]) {\n          feedbackElement = /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `feedback ${feedback[index]}`,\n            children: feedback[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 27\n          }, this);\n        }\n        let answerText = null;\n        if (showAnswers) {\n          answerText = /*#__PURE__*/_jsxDEV(\"span\", {\n            children: answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 18\n          }, this);\n        }\n        renderedQuestions.push( /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [prefix, /*#__PURE__*/_jsxDEV(\"input\", {\n            id: `input-${index}`,\n            placeholder: verb\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 9\n          }, this), questionContent, \" \", answerText, \" \", feedbackElement]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 5\n        }, this));\n      });\n    }\n    return renderedQuestions;\n  };\n  const selectQuizType = type => {\n    setQuizType(type);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty-selector\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"language-selector\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: quizType === 'Subjunctive' ? 'selected-quiz' : '',\n        onClick: () => selectQuizType('Subjunctive'),\n        children: \"Subjunctive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: quizType === 'Basic Conjugation' ? 'selected-quiz' : '',\n        onClick: () => selectQuizType('Basic Conjugation'),\n        children: \"Basic Conjugation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: quizType === 'Imperative' ? 'selected-quiz' : '',\n        onClick: () => selectQuizType('Imperative'),\n        children: \"Imperative\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateNewQuiz,\n      children: \"Generate New Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkAnswers,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowAnswers(!showAnswers),\n      children: \"Show Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"quiz-header\",\n      children: [difficulty.charAt(0).toUpperCase() + difficulty.slice(1), \" \", language.charAt(0).toUpperCase() + language.slice(1), \" \", quizType, \" Quiz\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 1\n    }, this), formatQuestions(quizData), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"output\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 2\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizComponent, \"HkYRodNhu1KUNN2Of9kFEgpI3Dg=\");\n_c = QuizComponent;\nexport default QuizComponent;\nvar _c;\n$RefreshReg$(_c, \"QuizComponent\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","pattern_with_prefix","QuizComponent","difficulty","language","_s","quizData","setQuizData","loading","setLoading","showAnswers","setShowAnswers","feedback","setFeedback","quizType","setQuizType","generateNewQuiz","i","inputElement","document","getElementById","value","userContent","EXTERNAL_API_ENDPOINT","payload","response","post","headers","data","error","console","checkAnswers","newFeedback","choices","message","lines","content","split","forEach","line","index","match","exec","answer","userInput","toLowerCase","formatQuestions","renderedQuestions","questionAnswerPairs","pair","prefix","trim","verb","questionContent","feedbackElement","className","children","fileName","_jsxFileName","lineNumber","columnNumber","answerText","push","id","placeholder","selectQuizType","type","onClick","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["/Users/nika/Documents/GitHub/AI_quiz_generator/src/QuizComponent.js"],"sourcesContent":["//QuizComponent.js\nimport React, { useState } from 'react';\nimport './QuizComponent.css';\nimport axios from 'axios';\nconst pattern_with_prefix = /(.*?)\\(([^()]+)\\)([^()]+)\\(([^()]+)\\)/;\n\n\n\n  const QuizComponent = ({ difficulty, language }) => {\n  const [quizData, setQuizData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showAnswers, setShowAnswers] = useState(false);  // New state variable\n  const [feedback, setFeedback] = useState({}); // New state to store feedback for each question\n  const [quizType, setQuizType] = useState('Subjunctive'); // New state for quiz type\n\n\nconst generateNewQuiz = async () => {\n  setLoading(true);\n\n  // Reset the feedback state\n  setFeedback({});\n\n  // Clear input boxes\n  for (let i = 0; i < 5; i++) { // Assuming you know there are always 5 questions; adjust if variable\n    const inputElement = document.getElementById(`input-${i}`);\n    if (inputElement) {\n      inputElement.value = '';\n    }\n  }\n\n // Determine the content based on the selected quiz type\n    let userContent;\nif (quizType === 'Imperative') {\n    userContent = `generate 5 complete ${language} ${difficulty} imperative sentences with the ${language} sentence verb unconjugated inside a () and the conjugated ${language} answer at the end in () for example '1.(venir) a la fiesta. (venga)'  output only sentences 1 to 5`;\n} else if (quizType === 'Subjunctive') {\n    userContent = `generate 5 complete ${language} ${difficulty} subjunctive sentences with the ${language} sentence verb unconjugated inside a () and the conjugated ${language} answer at the end in () for example '1. Es probable que Juan (venir) a la fiesta. (venga)'  output only sentences 1 to 5`;\n} else if (quizType === 'Basic Conjugation') {\n    userContent = `generate 5 basic ${language} ${difficulty} present tense sentences with the ${language} sentence verb unconjugated inside a () and the conjugated ${language} answer at the end in () for example '1. Juan (venir) a la fiesta. (viene)'  output only sentences 1 to 5`;\n}\n\n    try {\nconst EXTERNAL_API_ENDPOINT = '/.netlify/functions/getQuizQuestions';\nconst payload = {\n    userContent: userContent\n};\n\nconst response = await axios.post(EXTERNAL_API_ENDPOINT, payload, {\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n\n      const data = response.data;\n\n      setQuizData(data);\n      setLoading(false);\n      setShowAnswers(false);\n\n    } catch (error) {\n      console.error(\"Error fetching quiz data:\", error);\n      setLoading(false);\n      setShowAnswers(false);\n\n    }\n  };\n\n\n\nconst checkAnswers = () => {\n  let newFeedback = {};\n\n  if (!quizData || !quizData.choices || !quizData.choices[0] || !quizData.choices[0].message) {\n    console.error(\"Invalid quiz data\");\n    return;\n  }\n\n  const lines = quizData.choices[0].message.content.split('\\n');\n\n  lines.forEach((line, index) => {\n    let match = pattern_with_prefix.exec(line);\n    if (!match) return;\n\n    let answer = match[4];  // Extracting the answer from the matched groups\n\n    let inputElement = document.getElementById(`input-${index}`);\n    let userInput = inputElement ? inputElement.value : null;\n\n    if (userInput.toLowerCase() === answer.toLowerCase()) {\n\n      newFeedback[index] = \"correct\";\n    } else {\n      newFeedback[index] = \"wrong\";\n    }\n  });\n\n  setFeedback(newFeedback);\n};\n\n\n\n\nconst formatQuestions = (data) => {\n  let renderedQuestions = [];\n\n  if (data && data.choices && data.choices[0] && data.choices[0].message) {\n    let content = data.choices[0].message.content;\n\n    const questionAnswerPairs = content.split('\\n');\n    \n    questionAnswerPairs.forEach((pair, index) => {\n      // Extract the prefix, question, and answer from the pair using the updated regex pattern\n      let match = pattern_with_prefix.exec(pair);\n      if (!match) return;\n\n      let prefix = match[1].trim();\n      let verb = match[2];\n      let questionContent = match[3].trim();\n      let answer = match[4];\n\n      let feedbackElement = null;\n      if (feedback[index]) {\n        feedbackElement = <span className={`feedback ${feedback[index]}`}>{feedback[index]}</span>;\n      }\n\nlet answerText = null;\nif (showAnswers) {\n    answerText = <span>{answer}</span>;\n}\n\nrenderedQuestions.push(\n    <p key={index}>\n        {prefix} \n        <input id={`input-${index}`} placeholder={verb} /> \n        {questionContent} {answerText} {feedbackElement}\n    </p>\n);\n\n    });\n  }\n\n  return renderedQuestions;\n};\n\n\n\n\n\n\n  const selectQuizType = (type) => {\n    setQuizType(type);\n  };\n\nreturn (\n    <div>\n      {/* Selector buttons for quiz type */}\n        <div className=\"difficulty-selector\">\n \n</div>\n    <div className=\"language-selector\">\n  \n</div>\n      <div className=\"quiz-selector\">\n        <button \n            className={quizType === 'Subjunctive' ? 'selected-quiz' : ''} \n            onClick={() => selectQuizType('Subjunctive')}\n        >\n            Subjunctive\n        </button>\n        <button \n            className={quizType === 'Basic Conjugation' ? 'selected-quiz' : ''} \n            onClick={() => selectQuizType('Basic Conjugation')}\n        >\n            Basic Conjugation\n        </button>\n        {/* New button for Imperative */}\n        <button \n            className={quizType === 'Imperative' ? 'selected-quiz' : ''} \n            onClick={() => selectQuizType('Imperative')}\n        >\n            Imperative\n        </button>\n      </div>\n\n      <button onClick={generateNewQuiz}>Generate New Quiz</button>\n      <button onClick={checkAnswers}>Check</button>\n      <button onClick={() => setShowAnswers(!showAnswers)}>Show Answers</button>\n<h1 className=\"quiz-header\">{difficulty.charAt(0).toUpperCase() + difficulty.slice(1)} {language.charAt(0).toUpperCase() + language.slice(1)} {quizType} Quiz</h1>\n\n      {formatQuestions(quizData)}\n <div id=\"output\"></div>\n      {loading && <p>Loading...</p>}\n           {/* Display API Response for Debugging */}\n\n    </div>\n  );\n};\n\nexport default QuizComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}