{"ast":null,"code":"var _jsxFileName = \"/Users/nikaskeba/Documents/GitHub/AI_quiz_generator/src/QuizComponent.js\",\n  _s = $RefreshSig$();\n//QuizComponent.js\nimport React, { useState } from 'react';\nimport './QuizComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizComponent = () => {\n  _s();\n  const [quizData, setQuizData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showAnswers, setShowAnswers] = useState(false); // New state variable\n  const [feedback, setFeedback] = useState({}); // New state to store feedback for each question\n  const [quizType, setQuizType] = useState('Subjunctive'); // New state for quiz type\n\n  const generateNewQuiz = async () => {\n    setLoading(true);\n\n    // Reset the feedback state\n    setFeedback({});\n\n    // Clear input boxes\n    for (let i = 0; i < 5; i++) {\n      // Assuming you know there are always 5 questions; adjust if variable\n      const inputElement = document.getElementById(`input-${i}`);\n      if (inputElement) {\n        inputElement.value = '';\n      }\n    }\n\n    // Determine the content based on the selected quiz type\n    let userContent;\n    if (quizType === 'Imperative') {\n      userContent = \"Generate a Spanish quiz that numerically lists 5 unique Spanish imperative sentences. In each sentence, leave the verb without conjugation and display the verb within (). Keep the 5 generated sentences together. Write the word solution and then conjugate and list the 5 one word only conjugated verb solutions, listing only the verb, in numerical order after the questions. List only the questions and solutions with no other text.\";\n    } else if (quizType === 'Subjunctive') {\n      userContent = \"Generate a Spanish quiz that numerically lists 5 unique Spanish subjunctive sentences. In each sentence, leave the verb without conjugation and display the verb within (). Keep the 5 generated sentences together. Write the word solution and then conjugate and list the 5 one word only conjugated verb solutions, listing only the verb, in numerical order after the questions. List only the questions and solutions with no other text.\";\n    } else if (quizType === 'Basic Conjugation') {\n      userContent = \"Generate a Spanish quiz that numerically lists 5 unique Spanish present tense sentences. In each sentence, leave the verb without conjugation and display the verb within (). Keep the 5 generated sentences together. Write the word solution and then conjugate and list the 5 one word only conjugated verbs solutions writing only the conjugated verb and no other text in numerical order after the questions. List only the questions and solutions with no other text.\";\n    }\n    try {\n      const response = await fetch('/.netlify/functions/getQuizQuestions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content: userContent\n        }) // Sending content to the serverless function\n      });\n\n      const data = await response.json();\n      setQuizData(data);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching quiz data:\", error);\n      setLoading(false);\n    }\n  };\n  const checkAnswers = () => {\n    let newFeedback = {};\n    if (!quizData || !quizData.choices || !quizData.choices[0] || !quizData.choices[0].message) {\n      console.error(\"Invalid quiz data\");\n      return;\n    }\n\n    // Split based on the second occurrence of \"1.\"\n    let firstIndex = quizData.choices[0].message.content.indexOf('1.');\n    let secondIndex = quizData.choices[0].message.content.indexOf('1.', firstIndex + 1);\n    if (secondIndex === -1) {\n      console.error('Unexpected data format');\n      return;\n    }\n    const contentAfterSolutions = quizData.choices[0].message.content.substring(secondIndex);\n    const answers = contentAfterSolutions.split('\\n');\n    answers.forEach((answer, index) => {\n      let formattedAnswer = answer.replace(/^\\d+\\.\\s*/, '');\n      let inputElement = document.getElementById(`input-${index}`);\n      let userInput = inputElement ? inputElement.value : null;\n      if (userInput === formattedAnswer) {\n        newFeedback[index] = \"correct\";\n      } else {\n        newFeedback[index] = \"wrong\";\n      }\n    });\n    setFeedback(newFeedback);\n  };\n  const formatQuestions = data => {\n    let renderedQuestions = [];\n    if (data && data.choices && data.choices[0] && data.choices[0].message) {\n      // Finding the second occurrence of \"1.\"\n      let firstIndex = data.choices[0].message.content.indexOf('1.');\n      let secondIndex = data.choices[0].message.content.indexOf('1.', firstIndex + 1);\n      if (secondIndex === -1) {\n        console.error('Unexpected data format');\n        return;\n      }\n      const contentBeforeSolutions = data.choices[0].message.content.substring(firstIndex, secondIndex).trim();\n      const questions = contentBeforeSolutions.split('\\n');\n      const contentAfterSolutions = data.choices[0].message.content.substring(secondIndex);\n      const answers = contentAfterSolutions.split('\\n');\n      questions.forEach((question, index) => {\n        // Split the question around the placeholder\n        let parts = question.split(/\\((\\w+)\\)/g);\n\n        // If parts length is less than 3, it's not a valid question, so skip\n        if (parts.length < 3) return;\n        let feedbackElement = null;\n        if (feedback[index]) {\n          feedbackElement = /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `feedback ${feedback[index]}`,\n            children: feedback[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 27\n          }, this);\n        }\n        let answerText = null;\n        if (showAnswers && answers[index]) {\n          let formattedAnswer = answers[index].replace(/^\\d+\\.\\s*/, '');\n          answerText = /*#__PURE__*/_jsxDEV(\"span\", {\n            children: formattedAnswer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 22\n          }, this);\n        }\n        renderedQuestions.push( /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [parts[0], /*#__PURE__*/_jsxDEV(\"input\", {\n            id: `input-${index}`,\n            placeholder: parts[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 11\n          }, this), parts[2], \" \", answerText, \" \", feedbackElement]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }, this));\n      });\n    }\n    return renderedQuestions;\n  };\n  const selectQuizType = type => {\n    setQuizType(type);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: quizType === 'Subjunctive' ? 'selected-quiz' : '',\n        onClick: () => selectQuizType('Subjunctive'),\n        children: \"Subjunctive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: quizType === 'Basic Conjugation' ? 'selected-quiz' : '',\n        onClick: () => selectQuizType('Basic Conjugation'),\n        children: \"Basic Conjugation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: quizType === 'Imperative' ? 'selected-quiz' : '',\n        onClick: () => selectQuizType('Imperative'),\n        children: \"Imperative\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateNewQuiz,\n      children: \"Generate New Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkAnswers,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowAnswers(!showAnswers),\n      children: \"Show Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), formatQuestions(quizData), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizComponent, \"HkYRodNhu1KUNN2Of9kFEgpI3Dg=\");\n_c = QuizComponent;\nexport default QuizComponent;\nvar _c;\n$RefreshReg$(_c, \"QuizComponent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","QuizComponent","_s","quizData","setQuizData","loading","setLoading","showAnswers","setShowAnswers","feedback","setFeedback","quizType","setQuizType","generateNewQuiz","i","inputElement","document","getElementById","value","userContent","response","fetch","method","headers","body","JSON","stringify","content","data","json","error","console","checkAnswers","newFeedback","choices","message","firstIndex","indexOf","secondIndex","contentAfterSolutions","substring","answers","split","forEach","answer","index","formattedAnswer","replace","userInput","formatQuestions","renderedQuestions","contentBeforeSolutions","trim","questions","question","parts","length","feedbackElement","className","children","fileName","_jsxFileName","lineNumber","columnNumber","answerText","push","id","placeholder","selectQuizType","type","onClick","_c","$RefreshReg$"],"sources":["/Users/nikaskeba/Documents/GitHub/AI_quiz_generator/src/QuizComponent.js"],"sourcesContent":["//QuizComponent.js\nimport React, { useState } from 'react';\nimport './QuizComponent.css';\nconst QuizComponent = () => {\n  const [quizData, setQuizData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showAnswers, setShowAnswers] = useState(false);  // New state variable\n  const [feedback, setFeedback] = useState({}); // New state to store feedback for each question\n  const [quizType, setQuizType] = useState('Subjunctive'); // New state for quiz type\n\nconst generateNewQuiz = async () => {\n  setLoading(true);\n\n  // Reset the feedback state\n  setFeedback({});\n\n  // Clear input boxes\n  for (let i = 0; i < 5; i++) { // Assuming you know there are always 5 questions; adjust if variable\n    const inputElement = document.getElementById(`input-${i}`);\n    if (inputElement) {\n      inputElement.value = '';\n    }\n  }\n\n // Determine the content based on the selected quiz type\n    let userContent;\n      if (quizType === 'Imperative') {\n    userContent = \"Generate a Spanish quiz that numerically lists 5 unique Spanish imperative sentences. In each sentence, leave the verb without conjugation and display the verb within (). Keep the 5 generated sentences together. Write the word solution and then conjugate and list the 5 one word only conjugated verb solutions, listing only the verb, in numerical order after the questions. List only the questions and solutions with no other text.\";\n} else if (quizType === 'Subjunctive') {\n    userContent = \"Generate a Spanish quiz that numerically lists 5 unique Spanish subjunctive sentences. In each sentence, leave the verb without conjugation and display the verb within (). Keep the 5 generated sentences together. Write the word solution and then conjugate and list the 5 one word only conjugated verb solutions, listing only the verb, in numerical order after the questions. List only the questions and solutions with no other text.\";\n} else if (quizType === 'Basic Conjugation') {\n    userContent = \"Generate a Spanish quiz that numerically lists 5 unique Spanish present tense sentences. In each sentence, leave the verb without conjugation and display the verb within (). Keep the 5 generated sentences together. Write the word solution and then conjugate and list the 5 one word only conjugated verbs solutions writing only the conjugated verb and no other text in numerical order after the questions. List only the questions and solutions with no other text.\";\n}\n\n    try {\n      const response = await fetch('/.netlify/functions/getQuizQuestions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ content: userContent }) // Sending content to the serverless function\n      });\n\n      const data = await response.json();\n      setQuizData(data);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching quiz data:\", error);\n      setLoading(false);\n    }\n  };\n\n\n\nconst checkAnswers = () => {\n  let newFeedback = {};\n\n  if (!quizData || !quizData.choices || !quizData.choices[0] || !quizData.choices[0].message) {\n    console.error(\"Invalid quiz data\");\n    return;\n  }\n\n  // Split based on the second occurrence of \"1.\"\n  let firstIndex = quizData.choices[0].message.content.indexOf('1.');\n  let secondIndex = quizData.choices[0].message.content.indexOf('1.', firstIndex + 1);\n\n  if (secondIndex === -1) {\n    console.error('Unexpected data format');\n    return;\n  }\n\n  const contentAfterSolutions = quizData.choices[0].message.content.substring(secondIndex);\n  const answers = contentAfterSolutions.split('\\n');\n\n  answers.forEach((answer, index) => {\n    let formattedAnswer = answer.replace(/^\\d+\\.\\s*/, '');\n    let inputElement = document.getElementById(`input-${index}`);\n    let userInput = inputElement ? inputElement.value : null;\n\n    if (userInput === formattedAnswer) {\n      newFeedback[index] = \"correct\";\n    } else {\n      newFeedback[index] = \"wrong\";\n    }\n  });\n\n  setFeedback(newFeedback);\n};\n\n\n\nconst formatQuestions = (data) => {\n  let renderedQuestions = [];\n\n  if (data && data.choices && data.choices[0] && data.choices[0].message) {\n    // Finding the second occurrence of \"1.\"\n    let firstIndex = data.choices[0].message.content.indexOf('1.');\n    let secondIndex = data.choices[0].message.content.indexOf('1.', firstIndex + 1);\n    \n    if (secondIndex === -1) {\n      console.error('Unexpected data format');\n      return;\n    }\n\n    const contentBeforeSolutions = data.choices[0].message.content.substring(firstIndex, secondIndex).trim();\n    const questions = contentBeforeSolutions.split('\\n');\n\n    const contentAfterSolutions = data.choices[0].message.content.substring(secondIndex);\n    const answers = contentAfterSolutions.split('\\n');\n\n    questions.forEach((question, index) => {\n      // Split the question around the placeholder\n      let parts = question.split(/\\((\\w+)\\)/g);\n\n      // If parts length is less than 3, it's not a valid question, so skip\n      if (parts.length < 3) return;\n\n      let feedbackElement = null;\n      if (feedback[index]) {\n        feedbackElement = <span className={`feedback ${feedback[index]}`}>{feedback[index]}</span>;\n      }\n\n      let answerText = null;\n      if (showAnswers && answers[index]) {\n        let formattedAnswer = answers[index].replace(/^\\d+\\.\\s*/, '');\n        answerText = <span>{formattedAnswer}</span>;\n      }\n\n      renderedQuestions.push(\n        <p key={index}>\n          {parts[0]} \n          <input id={`input-${index}`} placeholder={parts[1]} /> \n          {parts[2]} {answerText} {feedbackElement}\n        </p>\n      );\n    });\n  }\n\n  return renderedQuestions;\n};\n\n\n\n\n  const selectQuizType = (type) => {\n    setQuizType(type);\n  };\n\nreturn (\n    <div>\n      {/* Selector buttons for quiz type */}\n      <div className=\"quiz-selector\">\n        <button \n            className={quizType === 'Subjunctive' ? 'selected-quiz' : ''} \n            onClick={() => selectQuizType('Subjunctive')}\n        >\n            Subjunctive\n        </button>\n        <button \n            className={quizType === 'Basic Conjugation' ? 'selected-quiz' : ''} \n            onClick={() => selectQuizType('Basic Conjugation')}\n        >\n            Basic Conjugation\n        </button>\n        {/* New button for Imperative */}\n        <button \n            className={quizType === 'Imperative' ? 'selected-quiz' : ''} \n            onClick={() => selectQuizType('Imperative')}\n        >\n            Imperative\n        </button>\n      </div>\n\n      <button onClick={generateNewQuiz}>Generate New Quiz</button>\n      <button onClick={checkAnswers}>Check</button>\n      <button onClick={() => setShowAnswers(!showAnswers)}>Show Answers</button>\n\n      {formatQuestions(quizData)}\n\n      {loading && <p>Loading...</p>}\n    </div>\n  );\n};\n\nexport default QuizComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}